// <auto-generated />
using System;
using BankAccountManagementSystem.DBContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BankAccountManagementSystem.Migrations
{
    [DbContext(typeof(ContextClass))]
    [Migration("20230726114223_CreateTables")]
    partial class CreateTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BankManagementSystem.Model.AccountType", b =>
                {
                    b.Property<Guid>("AccountTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TypeOfAccount")
                        .HasColumnType("int");

                    b.HasKey("AccountTypeId");

                    b.ToTable("AccountTypesDetails");
                });

            modelBuilder.Entity("BankManagementSystem.Model.BankAccount", b =>
                {
                    b.Property<Guid>("BankAccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AccountClosingDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("AccountNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("AccountOpeningDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("AccountTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalAmountOfBalance")
                        .HasColumnType("int");

                    b.HasKey("BankAccountId");

                    b.HasIndex("AccountTypeId");

                    b.ToTable("BankAccountsDetails");
                });

            modelBuilder.Entity("BankManagementSystem.Model.BankAccountPostingDetails", b =>
                {
                    b.Property<Guid>("PostingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PostingDetailsTransactionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PostingId");

                    b.HasIndex("PostingDetailsTransactionId");

                    b.ToTable("BankAccountPostingDetails");
                });

            modelBuilder.Entity("BankManagementSystem.Model.BankTransaction", b =>
                {
                    b.Property<Guid>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Amount")
                        .HasMaxLength(6)
                        .HasColumnType("int");

                    b.Property<Guid>("BankAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CatagoryOptions")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfTransaction")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstNameOfTransactionPerson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastNameOfTransactionPerson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleNameOfTransactionPerson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PaymentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TypeOfTransaction")
                        .HasColumnType("int");

                    b.HasKey("TransactionId");

                    b.HasIndex("BankAccountId");

                    b.HasIndex("PaymentId");

                    b.ToTable("BankTransactionDetails");
                });

            modelBuilder.Entity("BankManagementSystem.Model.Payment", b =>
                {
                    b.Property<Guid>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("NameOfPaymentType")
                        .HasColumnType("int");

                    b.HasKey("PaymentId");

                    b.ToTable("PaymentDetails");
                });

            modelBuilder.Entity("BankManagementSystem.Model.BankAccount", b =>
                {
                    b.HasOne("BankManagementSystem.Model.AccountType", "AccountType")
                        .WithMany()
                        .HasForeignKey("AccountTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountType");
                });

            modelBuilder.Entity("BankManagementSystem.Model.BankAccountPostingDetails", b =>
                {
                    b.HasOne("BankManagementSystem.Model.BankTransaction", "PostingDetails")
                        .WithMany()
                        .HasForeignKey("PostingDetailsTransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PostingDetails");
                });

            modelBuilder.Entity("BankManagementSystem.Model.BankTransaction", b =>
                {
                    b.HasOne("BankManagementSystem.Model.BankAccount", "BankAccount")
                        .WithMany()
                        .HasForeignKey("BankAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BankManagementSystem.Model.Payment", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BankAccount");

                    b.Navigation("PaymentMethod");
                });
#pragma warning restore 612, 618
        }
    }
}
